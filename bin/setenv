#!/bin/bash

# setenv (c) by Frederic Ruget (fred@atlant.is)
# 
# This work is licensed under a
# Creative Commons Attribution 4.0 International License.
# 
# You should have received a copy of the license along with this
# work. If not, see <http://creativecommons.org/licenses/by/4.0/>.

if [ "${0}" = "${BASH_SOURCE}" ]; then
  echo "Script $(basename "$BASH_SOURCE") is meant to be sourced"
  exit 1
fi
set -o pipefail
unset JINX_NO_TRAP_ERR


# -- Online help --------------------------------------------------------------

if [ "$1" = "-b" -o "$1" = "--help" ]; then
        man -P ul /dev/stdin <<< $(cat <<EOF
.TH SETENV 1 2022-01-16 "Jinx Setup Tools" "JINX SETUP TOOLS"
.SH NAME
.B $(basename "$BASH_SOURCE")
- set environment for Jinx

.SH SYNOPSIS
.B $(basename "$BASH_SOURCE")
[\fIoptions\fR]
\fIjinx_config_file\fR

.SH DESCRIPTION
\fB$(basename "$BASH_SOURCE")\fR sets the environment for working
in the configuration specified by \fIjinx_config_file\fR.

\fB$(basename "$BASH_SOURCE")\fR:
.RS
.IP -
sets and exports the \fBJINX_ROOT\fR environment variable,
.IP -
sets and exports the \fBJINX_CONFIG\fR environment variable,
.IP -
updates the \fBPATH\fR environment variable,
.IP -
checks the validity of the passphrase stored in the
\fI~/.ssh/passphrase_setup\fR file in the user's home directory.
.RE

\fB$(basename "$BASH_SOURCE")\fR must be sourced, not forked.

.SH OPTIONS

.TP
.B  --help
.TQ
.B  -h
Print a usage message.
EOF
    )
    return 0
fi

# -- Drop here if we have already run -----------------------------------------

if [ -n "${JINX_ROOT+set}" ]; then return 0; fi


# == Utility functions ========================================================

# Cf. https://stackoverflow.com/questions/5947742/how-to-change-the-output-color-of-echo-in-linux

export DFLT=$(tput sgr0)
export SMBD=$(tput bold)
export RMBD=$'\e'"[22m"
export SMUL=$(tput smul)
export RMUL=$(tput rmul)
export BLACK=$(tput setaf 0)
export RED=$(tput setaf 1)
export GREEN=$(tput setaf 2)
export YELLOW=$(tput setaf 3)
export BLUE=$(tput setaf 4)
export MAGENTA=$(tput setaf 5)
export CYAN=$(tput setaf 6)
export WHITE=$(tput setaf 7)

jinxh0 () { echo "$DFLT$GREEN$BOLD${@^^}$DFLT"; }
export -f jinxh0
jinxh1 () { echo "$DFLT$GREEN$BOLD${@}$DFLT"; }
export -f jinxh1
jinxh2 () { echo "$DFLT$GREEN${@}$DFLT"; }
export -f jinxh2
jinxnotice () { echo "$DFLT$BLUE$BOLD${@}$DFLT"; }
export -f jinxnotice
jinxerror () { echo "$DFLT$RED$BOLD${@}$DFLT"; }
export -f jinxerror

jinxtouch () ( # [--sudo] MODE [FILES...]
    set +x
    # .. Error management .....................................................
    trap '{
        local errno=$?
        if [ -n "${JINX_NO_TRAP_ERR+x}" ]; then
            trap - ERR;
            jinxerror "ERROR ($errno) ${BASH_SOURCE}:${LINENO}" >&2;
            return $errno;
        fi;
    }' ERR
    # .. Options...............................................................
    local _sudo=
    if [ $# = 0 ]; then trap - ERR; return 1; fi
    if [ "$1" == "--sudo" ]; then _sudo=sudo; shift; fi
    # .. Positional arguments..................................................
    if [ $# = 0 ]; then trap - ERR; return 1; fi
    local mode="$1"; shift
    local mask="$((7-${mode::1}))$((7-${mode:1:1}))$((7-${mode:2:1}))"
    # .. Positional arguments..................................................
    while [ $# != 0 ]; do
        $_sudo bash -c "umask $mask && touch $1 && chmod $mode $1"
        shift
    done
    trap - ERR; 
)
export -f jinxtouch

jinxpatch () ( # [--sudo] [--reverse] FILE [PATCH]
    # Note: jinxpatch assumes that the patch has been computed with:
    # LC_ALL=C TZ=UTC0 diff --new-file --text --unified orig-file new-file
    set +x
    # .. Error management .....................................................
    trap '{
        local errno=$?
        if [ -z "${JINX_NO_TRAP_ERR+x}" ]; then
            trap - ERR;
            jinxerror "ERROR ($errno) ${BASH_SOURCE}:${LINENO}" >&2;
            return $errno;
        fi;
    }' ERR
    # .. Options...............................................................
    local _sudo=
    local _rev # no "=": let _rev undefined
    if [ $# = 0 ]; then trap - ERR; return 2; fi
    if [ "$1" == "--sudo" ]; then _sudo=sudo; shift; fi
    if [ $# = 0 ]; then rtrap - ERR; eturn 2; fi
    if [ "$1" == "--reverse" ]; then _rev=; shift; fi
    # .. Positional arguments..................................................
    if [ $# = 0 -o $# -gt 2 ]; then trap - ERR; return 2; fi
    local file="$1"
    local delta
    if [ $# = 1 ]; then delta="$(cat)"; else delta="$2"; fi

    # .. Body .................................................................
    JINX_NO_TRAP_ERR=
    if [ -z "${_rev+x}" ]; then
        echo "$delta" | $_sudo patch --dry-run --quiet --force --reverse $file > /dev/null
        if [ $? = 0 ]; then # Patch was already applied
            trap - ERR;
            jinxnotice "File $file was already patched"
            return 0
        fi
        unset JINX_NO_TRAP_ERR
        echo "$delta" | $_sudo patch --unified --forward --backup-if-mismatch $file
    else
        echo "$delta" | $_sudo patch --dry-run --quiet --forward $file > /dev/null
        if [ $? = 0 ]; then # Patch was already reversed
            trap - ERR;
            jinxnotice "File $file was already unpatched"
            return 0;
        fi
        unset JINX_NO_TRAP_ERR
        echo "$delta" | $_sudo patch --unified --force --reverse --backup-if-mismatch $file
    fi
    local errno=$?
    trap - ERR
    return $errno
)
export -f jinxpatch


jinx-update-section () ( # [--sudo] FILE SECTION [CONTENTS]
    set +x
    # .. Error management .....................................................
    trap '{
        local errno=$?
        if [ -z "${JINX_NO_TRAP_ERR+x}" ]; then
            trap - ERR;
            jinxerror "ERROR ($errno) ${BASH_SOURCE}:${LINENO}" >&2;
            return $errno;
        fi;
    }' ERR
    # .. Options...............................................................
    local _sudo=
    if [ $# = 0 ]; then trap - ERR; return 2; fi
    if [ "$1" == "--sudo" ]; then _sudo=sudo; shift; fi
    # .. Positional arguments..................................................
    if [ $# -lt 2 -o $# -gt 3 ]; then trap - ERR; return 2; fi
    local file="$1"
    local section="$2"
    local contents
    if [ $# = 3 ]; then contents="$3"; else contents="$(cat)"; fi

    # .. Body .................................................................
    local inmark="# --> $section ------------------------------------------------------------------------"
    local outmark="# <-- $section ------------------------------------------------------------------------"
    inmark="${inmark::79}"
    outmark="${outmark::79}"
    local orig
    #JINX_NO_TRAP_ERR=
    orig=$($_sudo cat $file)
    #if [ $? != 0 ]; then trap - ERR; return 2; fi
    #unset JINX_NO_TRAP_ERR
    if grep -q "$inmark" /dev/stdin <<< "$orig"; then
        $_sudo perl -i -pe "BEGIN { undef \$/; binmode STDIN, \":encoding(UTF-8)\"; binmode STDOUT, \":encoding(UTF-8)\"; } s/\n$inmark.*\n$outmark/\n$inmark\n$outmark/smg" "$file" 
    else
        ( $_sudo cat "$file" && echo $'\n'"$inmark"$'\n'"$outmark" ) | $_sudo sponge "$file"
    fi
    $_sudo perl -i -pe "BEGIN { \$r = pop; undef \$/; binmode STDIN, \":encoding(UTF-8)\"; binmode STDOUT, \":encoding(UTF-8)\"; } s|\n$inmark\n$outmark|\n$inmark\n\$r\n$outmark|smg" "$file" "$contents"
    local delta=$(LC_ALL=C TZ=UTC0 $_sudo diff --new-file --text --unified /dev/stdin "$file" <<< "$orig")
    if [ -z "$delta" ]; then
        jinxnotice "No need to update $file."
    else
        jinxnotice "File $file was patched with:"
        jinxnotice "$delta"
    fi
    trap - ERR
)
export -f jinx-update-section





jinxglo () {
    cat "$JINX_CONFIG"
}
export -f jinxglo

jinxtog () {
    sponge "$JINX_CONFIG"
}
export -f jinxtog

jinxjq () {
    cat "$JINX_CONFIG" | jq "$@"
}
export -f jinxjq

jinxjqr () {
    cat "$JINX_CONFIG" | jq -r "$@"
}
export -f jinxjqr

jinxe() {
    "$JINX_ROOT/bin/jinxe" "$@"
}
export -f jinxe

jinxd() {
    "$JINX_ROOT/bin/jinxd" "$@"
}
export -f jinxd


# == Main =====================================================================

jinxmain () {

    jinxh0 "Configuring for user $USER..."

    # -- Check passphrase -----------------------------------------------------
    jinxh1 "Checking passphrase..."

    local res_idx=$( jinxglo | jq "[ .identities[] | .name == \"$USER\" ] | index(true)" )
    if [ "$res_idx" = null ]; then
        jinxerror "Error: identity $USER is unknown in $JINX_CONFIG"
        return 1
    fi
    local asc=$(jinxglo | jq -r ".identities[$res_idx].key_material ")

    local passfile="$HOME/.ssh/$( jinxglo | jq -r ".passphrase_file" )"
    local passphrase
    if [ ! -f "$passfile" ]; then
        jinxh1 "Creating passphrase file $SMUL$passfile$RMUL..."
        passphrase="$( $JINX_ROOT/lib/getpin passphrase "passphrase for $JINX_ROOT" )"
        if [ "${passphrase::1}" != "P" ]; then
            jinxnotice "Operation cancelled."
            return 1
        fi
        passphrase="${passphrase:1}"
        (umask 077 && mkdir -p $(dirname "$passfile"))
        (umask 077 && touch "$passfile")
        echo "$passphrase" > "$passfile"
    fi
    
    while true; do
        if (echo -n "$asc" | base64 -d | gpg --decrypt --batch --yes --passphrase-file "$passfile" --output /dev/null 2>/dev/null); then break; fi
        jinxerror "Error: invalid passphrase!"
        passphrase="$( $JINX_ROOT/lib/getpin passphrase "passphrase for $JINX_ROOT" invalid )"
        if [ "${passphrase::1}" != "P" ]; then
            jinxnotice "Operation cancelled."
            return 1
        fi
        passphrase="${passphrase:1}"
        echo "$passphrase" > "$passfile"
    done
    if [ -n "$passphrase" ]; then
        jinxnotice "Passphrase has been saved in $SMUL$passfile$RMUL."
    fi

    # -- Patch bash_profile ---------------------------------------------------

    jinxh1 "Updating bash_profile..."

    local jinx_in="\
# --> Jinx configuration ------------------------------------------------------"
    local jinx_cf="\
echo -n # Nothing to tell..."
    local jinx_ou="\
# <-- Jinx configuration ------------------------------------------------------"
    local bash_profile="$HOME/.bash_profile"
    local orig=$(cat $bash_profile)
    if grep -q "$jinx_in" /dev/stdin <<< "$orig"; then
        perl -i -pe "BEGIN { undef \$/; binmode STDIN, \":encoding(UTF-8)\"; binmode STDOUT, \":encoding(UTF-8)\"; } s/\n$jinx_in.*\n$jinx_ou/\n$jinx_in\n$jinx_ou/smg" "$bash_profile" 
    else
        echo $'\n'"$jinx_in"$'\n'"$jinx_ou" >> "$bash_profile"
    fi
    perl -i -pe "BEGIN { undef \$/; binmode STDIN, \":encoding(UTF-8)\"; binmode STDOUT, \":encoding(UTF-8)\"; } s|\n$jinx_in\n$jinx_ou|\n$jinx_in\n$jinx_cf\n$jinx_ou|smg" "$bash_profile" 
    local delta=$(LC_ALL=C TZ=UTC0 diff --new-file --text --unified /dev/stdin "$bash_profile" <<< "$orig")
    if [ -z "$delta" ]; then
        jinxnotice "No need to update bash profile."
    else
        jinxnotice "Bash profile was patched with:"
        jinxnotice "$delta"
    fi
}


# == Do it! ===================================================================

JINX_ROOT=$(dirname ${BASH_SOURCE})
if [ "${JINX_ROOT:0:1}" != "/" ]; then JINX_ROOT="${PWD}/${JINX_ROOT}"; fi
JINX_ROOT=$( sed 's|^\(.*\)/[^/]*$|\1|' <<< "$JINX_ROOT" )
export JINX_ROOT

if [ $# != 1 ]; then
    jinxerror "Error: $SMBD$(basename "$BASH_SOURCE")$RMBD expects exactly one argument!"
    unset JINX_ROOT
    return 1
fi
if [ "${1::1}" = "/" ]; then
    JINX_CONFIG="$1"
else
    JINX_CONFIG="$PWD/$1"
fi
if [ ! -f "$JINX_CONFIG" ]; then
    jinxerror "Error: File ${SMUL}$0${RMUL} not found!"
    unset JINX_ROOT
    unset JINX_CONFIG
    return 1
fi
export JINX_CONFIG

jinxmain

if [ $? = 0 ]; then
    if ! grep -q ":$JINX_ROOT/bin" /dev/stdin <<< "$PATH"; then
        PATH="$PATH:$JINX_ROOT/bin"
    fi
    unset jinxmain
    return 0
else
    unset JINX_ROOT
    unset JINX_CONFIG
    unset jinxmain
    return 1
fi
