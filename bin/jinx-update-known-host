#!/bin/bash

# jinx-known-host (c) by Frederic Ruget (fred@atlant.is)
# 
# This work is licensed under a
# Creative Commons Attribution 4.0 International License.
# 
# You should have received a copy of the license along with this
# work. If not, see <http://creativecommons.org/licenses/by/4.0/>.

# == Check we are correctly invoked and set env ==============================

if [ "${0}" != "${BASH_SOURCE}" ]; then
  echo "Script $(basename "$BASH_SOURCE") is not meant to be sourced"
  return 1
fi
source "$(dirname "$BASH_SOURCE")/setenv" ""
set -e


# == Clothes and patches ======================================================

# [ Empty ]


# == Main =====================================================================

main () {
    local stddir python_pid
    trap '{ local errno=$?;
            trap - ERR;
            jinxerror "ERROR ($errno) ${BASH_SOURCE}:${LINENO}" >&2;
            return $errno;
        }' ERR
    
    # -- Ingestion of command line arguments ----------------------------------

    local _help _verbose _bash
    local _args=()
    while (( "$#" )); do
        case "$1" in
        --bash)
            _bash=
            shift
            ;;
        -h|--help)
            _help=
            shift
            ;;
        -[^-]*|--?*) # unsupported flags
            echo "Error: Unsupported flag $1" >&2
            return 1
            ;;
        *) # preserve positional arguments
            args+=("$1")
            shift
            ;;
        esac
    done
    # Args cheatsheet...
    # args=(a "b c")
    # echo ${args[@]}   --> a b c
    # echo ${#args[@]}  --> 2
    # echo ${!args[@]}  --> 0 1
    # echo ${args[1]}   --> b c
    # for i in ${!args[@]}; do echo -n "${args[$i]}-"; done --> a-b c-

    # -- For debug only... ----------------------------------------------------

    if [ -n "${_bash+set}" ]; then
        bash --init-file <(echo "PS1='debug$ '")
        return 0
    fi

    # -- Online help ----------------------------------------------------------

    if [ -n "${_help+set}" ]; then
        man -P ul /dev/stdin <<< $(cat <<EOF
.TH $(basename "$BASH_SOURCE" | awk '{ print toupper($0) }') \
1 2022-01-20 "Jinx Setup Tools" "JINX SETUP TOOLS"
.SH NAME
.B $(basename "$BASH_SOURCE")
- import remote host SSH keys in local server 

.SH SYNOPSIS
.B $(basename "$BASH_SOURCE")
[\fIoptions\fR]
[\fIhostnames\fR]

.SH DESCRIPTION
\fB$(basename "$BASH_SOURCE")\fR populates the \fI~/.ssh/known_hosts\fR
SSH configuration file with public key information for each
host listed in \fIhostnames\fR.

.SH OPTIONS

.TP
.B  --help
.TQ
.B  -h
Print a usage message.
EOF
        )
        return 0
    fi

    # -- Main body ------------------------------------------------------------

    local idx
    for idx in ${!args[@]}; do 
        local subhost="${args[$idx]}"

        # -- Check validity of subhost ----------------------------------------
        local hostidx=$( jinxglo | jq "[ .hosts[] | .name == \"$subhost\" ] | index(true)" )
        if [ "$hostidx" = null ]; then
            jinxerror "Error: host $subhost is unknown in $JINX_CONFIG!"
            exit 1
        fi
        local fqdn=$( jinxglo |  jq -r .hosts[$hostidx].fqdn )

        # -- Remove subhost from ~/.ssh/known_hosts ---------------------------
        if [ -f "$HOME/.ssh/known_hosts" ]; then
            jinxnotice "Removing $subhost from ~/.ssh/known_hosts..."
            local line
            cat "$HOME/.ssh/known_hosts" | \
                while read line; do
                    if [ "${line::3}" = "|1|" ]; then 
                        local hash="$( echo "$line" | sed 's/^|1|[^|]*|\([^ ]*\) .*/\1/' | base64 -d | xxd -p )"
                        local salt="$( echo "$line" | sed 's/^|1|\([^|]*\)|.*/\1/' | base64 -d | xxd -p )"
                        local hashedhost="$( echo -n "$subhost" \
                            | openssl sha1 -mac HMAC -macopt hexkey:$salt \
                            | awk '{print $2}' )"
                        local hashedfqdn="$( echo -n "$fqdn" \
                            | openssl sha1 -mac HMAC -macopt hexkey:$salt \
                            | awk '{print $2}' )"
                        if [ "$hash" = "$hashedhost" ]; then continue; fi
                        if [ "$hash" = "$hashedfqdn" ]; then continue; fi
                        echo "$line"
                    else
                        if echo "$line" | grep -q "$subhost"; then continue; fi
                        if echo "$line" | grep -q "$fqdn"; then continue; fi
                        echo "$line"
                    fi
                done \
                | sponge "$HOME/.ssh/known_hosts"
        else
            ( umask 022 && touch "$HOME/.ssh/known_hosts" )
        fi

        # -- Add keys for subhost to ~/.ssh/known_hosts -----------------------
        local keycnt=$( jinxglo |  jq ".hosts[$hostidx].hostkeys | length")
        local keyidx
        for keyidx in $(seq 0 $((keycnt-1))); do
            local thisalgo="$( jinxglo \
                | jq -r ".hosts[$hostidx].hostkeys[$keyidx].algo" )"
            local thiskey="$( jinxglo \
                | jq -r ".hosts[$hostidx].hostkeys[$keyidx].pubkey" \
                | base64 -d | jinxd )"
            jinxnotice "Adding $thisalgo key for $fqdn..."
            (
                "$JINX_ROOT/lib/hashssh" "$fqdn" && echo " $thiskey"
            ) >> ~/.ssh/known_hosts <<< "$thiskey"
            if [ "$subhost" != "$fqdn" ]; then
                jinxnotice "Adding $thisalgo key for $subhost..."
                (
                    "$JINX_ROOT/lib/hashssh" "$subhost" && echo " $thiskey"
                ) >> ~/.ssh/known_hosts <<< "$thiskey"
            fi
        done
    done
    trap - ERR;
}


# == Do it ===================================================================

main "$@"
